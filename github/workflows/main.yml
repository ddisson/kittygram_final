name: Kittygram CI/CD Workflow

on:
  push:
    branches:
      - main

jobs:
  backend_checks:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
        pip install -r ./backend/requirements.txt 

    - name: Check with flake8
      run: |
        flake8 backend/

  frontend_tests:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up NodeJS
      uses: actions/setup-node@v3
      with:
        node-version: 18

    - name: Install dependencies
      run: |
        cd frontend/
        npm ci

    - name: Run frontend tests
      run: |
        cd frontend/
        npm test

  build_and_push:
    runs-on: ubuntu-latest
    needs: [backend_checks, frontend_tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and Push backend
      uses: docker/build-push-action@v2
      with:
        context: ./backend/
        push: true
        tags: username/kittygram_backend:latest

    - name: Build and Push frontend
      uses: docker/build-push-action@v2
      with:
        context: ./frontend/
        push: true
        tags: username/kittygram_frontend:latest

    - name: Build and Push gateway
      uses: docker/build-push-action@v2
      with:
        context: ./gateway/
        push: true
        tags: username/kittygram_gateway:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    # Assuming you have a proper deployment script or commands that use docker-compose to pull new images, restart services, collect static, and run migrations. 

    - name: Deploy to Server
      run: ./path_to_your_deployment_script_or_commands.sh

  notify:
    runs-on: ubuntu-latest
    needs: deploy

    steps:
    - name: Notify on Telegram
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: "Deployment completed successfully!"

deploy:
    runs-on: ubuntu-latest
    needs: 
      - build_and_push
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2  # Note: I used v2 as it's more common, adjust if needed

    # Copy docker-compose.yml to the production server
    - name: Copy docker-compose.yml via ssh
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        source: "docker-compose.yml"
        target: "kittygram"

    # Execute deployment commands on the remote server
    - name: Executing remote ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        script: |
          cd kittygram
          sudo docker compose -f docker-compose.yml pull
          sudo docker compose -f docker-compose.yml down
          sudo docker compose -f docker-compose.yml up -d
          sudo docker compose -f docker-compose.yml exec backend python manage.py migrate
          sudo docker compose -f docker-compose.yml exec backend python manage.py collectstatic
